//저번시간 요약 {
//    정수 [printf메소드 : %d]
//        byte
//        short
//        int
//        long
//    실수 [printf메소드 : %f]
//        float
//        double
//    문자 [printf메소드 : %c]
//        char
//    문자열 [printf메소드 : %s]
//        String
//}
//
//Computer의 처리방법 {
//    2진법 (5v to 0v) [문자]
//        단위 : bit (max 128)
//            - 2bit, 2² = 4
//            - 4bit(nibble), 2⁴ = 16
//            -> 1 byte = 8bit, 256개
//            => 현제 64bit Computer 사용
//                -> 64bit ┐
//                -> 32bit ┴ word
//                => 한꺼번에 처리 할 수 있는 용량을 말함
//    2진법 숫자
//            0   8   4   2   1
//        +5  0   0   1   0   1
//        -5  1   0   1   0   1
//
//최초의 Computer에는
//    가산기와 감산기만 사용함
//    이후 정수에서 음수를 표현하기 위해 보수를 채택함
//
//보수
//    기존의 0이란 기준점을 제외한 다른 기준점에서부터 목표값까지의 차이
//    동일한 자리수의 최대값에서 값을 빼는 것
//    ex) 999-110 = 889(9의 보수)+1 = 810(10의 보수)
//        2진법 = 2의 보수(음수), 1의 보수
//        8진법 = 8의 보수, 7의 보수
//
//현제의 Computer에는
//        보수가 채택됨에 있어 Computer, CPU에는 가산기만 존재함
//}
//
//2진법 {
//    10  =   1   0   1   0
//        1의 보수   =   0   1   0   1
//        2의 보수   =   0   1   1   0
//        -> 양의 숫자 표현이 항상 음의 숫자 표현보다 하나 작음
//        => 양의 숫자에 0이 포함되기 때문
//
//    2^8 =   -128    ~   +127
//        -> 256
//    2^16=   -32768  ~   +32767
//
//            1   1   0   1   1   0
//  1의 보수   0   0   1   0   0   1
//  2의 보수   0   0   1   0   1   0
//}
//
//문자 {
//    문자 : ASCⅡ Code
//        : Byte (256개)
//    정수 : 2진수 표현
//        : 음수 2진수 "2의 보수"로 표현
//
//        ex) 10을 2진법으로 표현했을 때 -10의 표현 방법
//            +10 = 1010
//            -10 = 0110
//    소수
//        3.141592
//        0.3141592 * 10^2 ┐
//        314.1592 * 10^-2 ┴ 지수표현
//        - 소수점 이하의 자리수 = 정밀도
//
//        -> 항상 정수부분을 0으로 설정하기로 함
//        => ex) 32.5 -> 0.325 * 10^2
//        -> 가수/부호/지수/지수부호
//
//        float는 6자리까지는 믿을 수 있음
//}
//
//boolean - bit (true, false)
//char ┐ (유니코드)
//byte ┴ byte (-128부터 127)
//short - word (-32768부터 32767)
//int - word (약 -21억부터 21억까지)
//long - double word (-9223372036854775808부터 9223372036854775807)
//float - double word (유효숫자(정밀도)7자리)
//double - double word (유효숫자(정밀도)15자리)
//
//Data type
//    primitivetype (기본 자료형)
//        boolean형 - boolean
//        문자형 - char 캐릭터(character형)
//        숫자(numeric)형
//            - 정수(integer)형 {
//                byte
//                short
//                int(기본형)
//                long
//            }
//            - 실수(real)형 {
//                float
//                double(기본형)
//            }